---
export interface Props {
  reciter: string;
  surahNumber: number;
}

const { reciter, surahNumber } = Astro.props;

import PlayArrow from "../icons/google-icons/play-arrow.svg";
import Pause from "../icons/google-icons/pause.svg";
import FastRewind from "../icons/google-icons/fast-rewind.svg";
import FastForward from "../icons/google-icons/fast-forward.svg";
import VolumeUp from "../icons/google-icons/volume-up.svg";
import VolumeOff from "../icons/google-icons/volume-off.svg";
import Spinner from "../icons/spinner.svg";
import Repeat from "../icons/google-icons/repeat.svg";
import RepeatOne from "../icons/google-icons/repeat-one.svg";
---

<div
  id="recitation-bar"
  data-reciter={reciter}
  data-surah-number={surahNumber}
  class="fixed right-0 bottom-0 left-0 z-40 flex flex-wrap items-center justify-center gap-2 border-t border-neutral-300 bg-white p-4 md:gap-4 dark:border-neutral-600 dark:bg-neutral-900"
>
  <audio id="recitation-audio" preload="metadata"></audio>

  <button
    id="play-pause-btn"
    class="relative flex h-10 w-10 items-center justify-center rounded-full bg-black text-white transition-colors hover:bg-neutral-700 md:h-12 md:w-12 dark:bg-white dark:text-black dark:hover:bg-neutral-300"
    aria-label="Play/Pause"
  >
    <span id="play-icon" class="relative z-10">
      <PlayArrow class="play-arrow" />
      <Pause class="pause-icon hidden" />
    </span>
    <Spinner
      id="play-spinner"
      class="absolute top-1/2 left-1/2 hidden h-4 w-4 -translate-x-1/2 -translate-y-1/2 transform animate-spin text-white md:h-5 md:w-5 dark:text-black"
    />
  </button>

  <div class="max-w-md flex-1">
    <input
      id="progress-bar"
      type="range"
      min="0"
      max="100"
      value="0"
      class="h-2 w-full cursor-pointer appearance-none rounded-lg bg-neutral-200 dark:bg-neutral-700"
    />
    <div
      class="mt-1 flex justify-between text-sm text-neutral-600 dark:text-neutral-400"
    >
      <span id="current-time">0:00</span>
      <span id="duration">0:00</span>
    </div>
  </div>

  <div class="flex items-center gap-2">
    <button
      id="skip-back"
      class="flex h-10 w-10 items-center justify-center rounded bg-neutral-200 hover:bg-neutral-300 md:h-10 md:w-12 dark:bg-neutral-700 dark:hover:bg-neutral-600"
      aria-label="Skip back 10s"><FastRewind /></button
    >
    <button
      id="skip-forward"
      class="flex h-10 w-10 items-center justify-center rounded bg-neutral-200 hover:bg-neutral-300 md:h-10 md:w-12 dark:bg-neutral-700 dark:hover:bg-neutral-600"
      aria-label="Skip forward 10s"><FastForward /></button
    >
    <button
      id="loop-btn"
      class="flex h-10 w-10 items-center justify-center rounded bg-neutral-200 hover:bg-neutral-300 md:h-10 md:w-12 dark:bg-neutral-700 dark:hover:bg-neutral-600"
      aria-label="Toggle loop"
      ><Repeat class="repeat-icon" /><RepeatOne
        class="repeat-one-icon hidden"
      /></button
    >
  </div>

  <div class="hidden items-center gap-2 md:flex">
    <button
      id="mute-btn"
      class="flex h-10 w-10 items-center justify-center rounded bg-neutral-200 hover:bg-neutral-300 md:h-10 md:w-12 dark:bg-neutral-700 dark:hover:bg-neutral-600"
      aria-label="Mute/Unmute"
      ><span class="mute-icon">
        <VolumeUp class="volume-up" />
        <VolumeOff class="volume-off hidden" />
      </span></button
    >
    <input
      id="volume-slider"
      type="range"
      min="0"
      max="1"
      step="0.1"
      value="1"
      class="h-2 w-20 cursor-pointer appearance-none rounded-lg bg-neutral-200 dark:bg-neutral-700"
    />
  </div>
</div>

<script>
  import { AudioPlayer } from "../utils/audioPlayer";

  document.addEventListener("DOMContentLoaded", () => {
    const audio = document.getElementById("recitation-audio") as HTMLAudioElement;
    const playPauseBtn = document.getElementById("play-pause-btn") as HTMLButtonElement;
    const playIcon = document.getElementById("play-icon") as HTMLSpanElement;
    const progressBar = document.getElementById("progress-bar") as HTMLInputElement;
    const currentTimeEl = document.getElementById("current-time") as HTMLSpanElement;
    const durationEl = document.getElementById("duration") as HTMLSpanElement;
    const skipBackBtn = document.getElementById("skip-back") as HTMLButtonElement;
    const skipForwardBtn = document.getElementById("skip-forward") as HTMLButtonElement;
    const muteBtn = document.getElementById("mute-btn") as HTMLButtonElement;
    const volumeSlider = document.getElementById("volume-slider") as HTMLInputElement;
    const loopBtn = document.getElementById("loop-btn") as HTMLButtonElement;

    const repeatIcon = loopBtn.querySelector(".repeat-icon");
    const repeatOneIcon = loopBtn.querySelector(".repeat-one-icon");
    const playSpinner = document.getElementById("play-spinner") as unknown as SVGSVGElement;
    const playArrow = playIcon.querySelector(".play-arrow");
    const pauseIcon = playIcon.querySelector(".pause-icon");
    const volumeUp = muteBtn?.querySelector(".volume-up");
    const volumeOff = muteBtn?.querySelector(".volume-off");

    // Read props from data attributes
    const recitationBar = document.getElementById("recitation-bar");
    const defaultReciter = recitationBar!.dataset.reciter!;
    const surahNumber = parseInt(recitationBar!.dataset.surahNumber!);

    // Get selected reciter from localStorage, fallback to default
    const reciter = localStorage.getItem("recitation-reciter") || defaultReciter;

    const player = new AudioPlayer(
      {
        audio,
        playPauseBtn,
        playIcon,
        progressBar,
        currentTimeEl,
        durationEl,
        skipBackBtn,
        skipForwardBtn,
        muteBtn,
        volumeSlider,
        loopBtn,
        repeatIcon,
        repeatOneIcon,
        playSpinner,
        playArrow,
        pauseIcon,
        volumeUp,
        volumeOff,
      },
      reciter,
      surahNumber
    );

    window.addEventListener('reciterChanged', (e: any) => player.changeReciter(e.detail));
  });
</script>
